#!/usr/bin/env bash

# Colors for script output
[[ $BARE_COLOR == 1 ]] && {
	GREEN=$'\e[32m'
	YELLOW=$'\e[33m'
	BLUE=$'\e[34m'
	GRAY=$'\e[2;37m'
	RESET=$'\e[0m'
}

# Function to check if everything is set up
check_setup() {
    echo -e " ${GRAY}|${RESET} ${BLUE}Checking current setup...${RESET}"
    sleep 0.05

    # Ensure .etc directory and barerc file exist
    mkdir -p .etc
    touch .etc/barerc
    sleep 0.05

    # Check if required variables are set
    all_set=true
    for var in "${required_variables[@]}"; do
        if ! grep -q "^export $var=" .etc/barerc; then
            echo -e " ${GRAY}|${RESET} 📝 $var is not set."
            all_set=false
        fi
        sleep 0.05
    done

    # Check if dependencies are installed
    for package in "${!dependencies[@]}"; do
        command=${dependencies[$package]}
        if ! command -v "$command" >/dev/null 2>&1; then
            echo -e " ${GRAY}|${RESET} 📝 $command not found."
            all_set=false
        fi
        sleep 0.05
    done

    if $all_set; then
        echo ""
        echo -e " ${GRAY}|${RESET} ${GREEN}All checks passed! ✅${RESET}"
    else
        echo ""
        echo -e " ${GRAY}|${RESET} ${GRAY}Setup incomplete.${RESET}"
        echo -e " ${GRAY}|${RESET} Continuing setup..."
        echo ""
    fi
    sleep 0.05
}

# Function to prompt for sensitive input (like passwords)
prompt_secret() {
    read -rsp "$1" input
    echo "$input"
    sleep 0.05
}

bash .lib/sync

# Required variables
required_variables=("OPENAI_API_KEY" "POSTMARK_API_TOKEN" "BARE_EMAIL_FROM" "STRIPE_SECRET_KEY" "EDITOR")

# List of dependencies and their associated commands
declare -A dependencies=(
    ["jq"]="jq"
    ["yq"]="yq"
	["yt-dlp"]="yt-dlp"
	["curl"]="curl"
    ["ffmpeg"]="ffmpeg"
    ["recutils"]="recsel"
    ["sqlite3"]="sqlite3"
    ["pandoc"]="pandoc"
    ["xxd"]="xxd"
    ["php"]="php"
    ["awk"]="awk"
    ["perl"]="perl"
    ["openssl"]="openssl"
    ["imagemagick"]="convert"
    ["qrencode"]="qrencode"
    ["csvkit"]="csvcut"
)

# Main setup process
setup() {
    echo ""
    echo -e " ${GRAY}|${RESET} Welcome to ${GREEN}bare${RESET}! 🙌"
    sleep 0.05
    echo -e " ${GRAY}|${RESET} Setting things up..."
    echo ""

    # Perform setup check
    check_setup

    # Ensure required variables are set
    for var in "${required_variables[@]}"; do
        if ! grep -q "^export $var=" .etc/barerc; then
            echo -e " ${GRAY}|${RESET} ${YELLOW}Notice:${RESET} ${GREEN}$var${RESET} is not set."
            read -rp " ${GRAY}|${RESET} Set ${GREEN}$var${RESET} now? (y/n): " response
            sleep 0.05
            if [[ $response =~ ^[Yy]$ ]]; then
                value=$(prompt_secret " ${GRAY}|${RESET} $var: ")
                echo "export $var=\"$value\"" >> .etc/barerc
            fi
            sleep 0.05
        fi
    done

    echo ""
    echo -e " ${GRAY}|${RESET} ${BLUE}Checking dependencies...${RESET}"
    sleep 0.05




    # Install dependencies based on OS

    if [[ "$OS" == "Ubuntu" ]]; then

		# Ubuntu

		# make sure we have snap, and put snap in path
		if ! command -v snap >/dev/null 2>&1; then
			echo -e " ${GRAY}|${RESET} ${YELLOW}snap missing.${RESET}"
			read -rp " ${GRAY}|${RESET} Install 'snap'? (y/n): " response
			sleep 0.05
			if [[ $response =~ ^[Yy]$ ]]; then
				echo -e " ${GRAY}|${RESET} ${BLUE}Installing snap...${RESET}"
				sleep 0.05
				sudo apt-get install -y snapd
			fi
		fi

		if ! echo "$PATH" | grep -q "^/snap/bin"; then
			# shellcheck disable=SC2016
			echo 'export PATH=/snap/bin:$(echo "$PATH" | sed -e "s|/snap/bin:||g")' >> ~/.bashrc
		fi

		# we'll also need pipx
		if ! command -v pipx >/dev/null 2>&1; then
			echo -e " ${GRAY}|${RESET} ${YELLOW}pipx missing.${RESET}"
			read -rp " ${GRAY}|${RESET} Install 'pipx'? (y/n): " response
			sleep 0.05
			if [[ $response =~ ^[Yy]$ ]]; then
				echo -e " ${GRAY}|${RESET} ${BLUE}Installing pipx...${RESET}"
				sleep 0.05
				python3 -m pip install --user pipx
				python3 -m pipx ensurepath
			fi
		fi

		for package in "${!dependencies[@]}"; do
			command=${dependencies[$package]}
			if ! command -v "$command" >/dev/null 2>&1; then
				echo -e " ${GRAY}|${RESET} ${YELLOW}$command missing.${RESET}"
				read -rp " ${GRAY}|${RESET} Install '$package'? (y/n): " response
				sleep 0.05
				if [[ $response =~ ^[Yy]$ ]]; then
					echo -e " ${GRAY}|${RESET} ${BLUE}Installing $package...${RESET}"
					sleep 0.05
					if [[ "$package" == "sqlpage" ]]; then
						curl -sL -o sqlpage-linux.tgz \
							https://github.com/lovasoa/SQLpage/releases/download/v0.26.0/sqlpage-linux.tgz
						tar -xzf sqlpage-linux.tgz
						sudo mv sqlpage.bin /usr/local/bin/sqlpage
						sudo chmod 755 /usr/local/bin/sqlpage
						rm -rf sqlpage sqlpage-linux.tgz
					elif [[ "$package" == 'yq' ]]; then
						sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
						sudo chmod +x /usr/local/bin/yq
					elif [[ "$package" == 'curl' ]]; then
						# if curl version is less than 7.82, upgrade with snap
						curl_version=$(curl --version | head -n1 | awk '{print $2}')
						if dpkg --compare-versions "$curl_version" lt 7.82; then
							sudo snap install curl
						fi
					elif [[ "$package" == 'yt-dlp' ]]; then
						pipx install yt-dlp
					else
						sudo apt-get install -y "$package" || echo -e " ${GRAY}|${RESET} ${YELLOW}Install $package manually.${RESET}"
					fi
					sleep 0.05
				fi
			else
				echo -e " ${GRAY}|${RESET} ${GREEN}$command found.${RESET}"
			fi
			sleep 0.05
		done

    elif [[ "$OS" == "macOS" ]]; then

		# macOS

		for package in "${!dependencies[@]}"; do
			command=${dependencies[$package]}
			if ! command -v "$command" >/dev/null 2>&1; then
				echo -e " ${GRAY}|${RESET} ${YELLOW}$command missing.${RESET}"
				read -rp " ${GRAY}|${RESET} Install '$package'? (y/n): " response
				sleep 0.05
				if [[ $response =~ ^[Yy]$ ]]; then
					echo -e " ${GRAY}|${RESET} ${BLUE}Installing $package...${RESET}"
					sleep 0.05
					if ! command -v brew >/dev/null 2>&1; then
						echo -e " ${GRAY}|${RESET} ${YELLOW}Homebrew not found.${RESET}"
						echo -e " ${GRAY}|${RESET} ${BLUE}Installing Homebrew...${RESET}"
						/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
						echo -e " ${GRAY}|${RESET} ${GREEN}Homebrew installed.${RESET}"
						echo -e " ${GRAY}|${RESET} ${BLUE}You may need to add Homebrew to your PATH. Follow the instructions provided by the Homebrew installer.${RESET}"
						sleep 0.05
					fi
					brew install "$package" || echo -e " ${GRAY}|${RESET} ${YELLOW}Install $package manually.${RESET}"
				fi
			else
				echo -e " ${GRAY}|${RESET} ${GREEN}$command found.${RESET}"
			fi
			sleep 0.05
		done

		# Ensure coreutils is installed for gdate
		if ! command -v gdate >/dev/null 2>&1; then
			echo -e " ${GRAY}|${RESET} ${YELLOW}gdate missing.${RESET}"
			read -rp " ${GRAY}|${RESET} Install 'coreutils'? (y/n): " response
			sleep 0.05
			if [[ $response =~ ^[Yy]$ ]]; then
				echo -e " ${GRAY}|${RESET} ${BLUE}Installing coreutils...${RESET}"
				sleep 0.05
				brew install coreutils
			fi
		fi

	else

		message="bare is designed for use with Ubuntu or macOS. If you're using a unix-like operating system, you'll probably be fine, but please install the required dependencies manually."
		
		if command -v fold > /dev/null && command -v column > /dev/null; then
			echo "$message" | fold -s -w 60 | column -t
		else
			echo "$message"
		fi

    fi

	# Minimum Bash version
	required_version="5.1"
	current_version=$(echo "$BASH_VERSION" | sed -E 's/^([0-9]+\.[0-9]+).*/\1/')

	if [[ $OS = 'macOS' ]]; then
		deps brew
		# Check that we have at least Bash 5.1+
		if [[ $(perl -e "print 1 if '$current_version' ge '$required_version'") != 1 ]]; then
			echo "Error: Bash version 5.1+ required. Currently running $current_version."
			echo "To install Bash 5.1+, run the following command:"
			echo "  brew install bash"
			echo "Ensure that Homebrew's bin directory is in your PATH:"
			echo "  export PATH=\"/opt/homebrew/bin:\$PATH\"  # For Apple Silicon (M1+)"
			echo "  export PATH=\"/usr/local/bin:\$PATH\"    # For Intel Macs"
			exit 1
		fi
	elif [[ $OS == 'Ubuntu' ]]; then
		deps snap
		# Check that we have at least Bash 5.1+
		if [[ $(perl -e "print 1 if '$current_version' ge '$required_version'") != 1 ]]; then
			echo "Error: Bash version 5.1+ required. Currently running $current_version."
			echo "To install Bash 5.1+, run the following command:"
			echo "  sudo snap refresh && sudo snap install bash"
			exit 1
		fi
	else
		echo "☝️ Please make sure you're using Bash 5.1+ to use bare."
	fi
    
    # Final message
    echo ""
    echo -e " ${GRAY}|${RESET} ${GREEN}Setup complete! 🎉${RESET}"
    echo ""
    
    # Define the alias string
    ALIAS_STRING="alias bare='$BARE_DIR/bare'"

    # Check if the alias is present in the shell configuration file
    if ! grep -q "$ALIAS_STRING" "$SHELL_CONFIG"; then
        sleep 0.05
        echo -e " ${GRAY}|${RESET} Consider aliasing '${GREEN}bare${RESET}' in your"
        echo -e " ${GRAY}|${RESET} shell config to access bare wherever you are."
        echo ""
        echo -e " ${GRAY}|${RESET} You can run this in your terminal:"
        echo -e " ${GRAY}|${RESET} echo \"$ALIAS_STRING\" >> $SHELL_CONFIG"
        echo ""
        # Prompt the user to add the alias
        read -rp " ${GRAY}|${RESET} Would you like us to run that for you? (y/n) : " response
        if [[ $response =~ ^[Yy]$ ]]; then
            echo "$ALIAS_STRING" >> "$SHELL_CONFIG"
        fi
    else
        echo -e " ${GRAY}|${RESET} ${GREEN}bare${RESET} is aliased for use throughout the terminal. Nice 💪"
        echo -e " ${GRAY}|${RESET} Restart your shell to run \`${GREEN}bare${RESET}\` or \`${GREEN}bare terminal${RESET}\` from anywhere in your terminal."
    fi

    echo ""
    echo -e " ${GRAY}|${RESET} ${BLUE}Go conquer the world with ${GREEN}bare${RESET}."
    echo ""
    sleep 0.05
}

# Run setup
setup
