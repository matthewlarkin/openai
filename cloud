#!/usr/bin/env bash

deps curl jq

set -e

function getCloudProvider() {

	[[ -n $HETZNER_API_TOKEN ]] && echo "hetzner" && exit 0
	[[ -n $DIGITALOCEAN_API_TOKEN ]] && echo "digitalocean" && exit 0
	[[ -n $LINODE_API_TOKEN ]] && echo "linode" && exit 0
	[[ -n $VULTR_API_TOKEN ]] && echo "vultr" && exit 0
	{
		echo "Error: no cloud provider set."
		echo ""
		echo "Requires one of:"
		echo -e "  - HETZNER_API_TOKEN\n  - DIGITALOCEAN_API_TOKEN\n  - LINODE_API_TOKEN\n  - VULTR_API_TOKEN"
	 } >&2 && exit 1

}

function hetzner_info() {
	
	local json
		json=$(curl -sL -H "Authorization: Bearer $HETZNER_API_TOKEN" \
		https://api.hetzner.cloud/v1/servers | jq '[.servers[] | {
			status,
			ip: .public_net.ipv4.ip,
			description: .server_type.description,
			cores: .server_type.cores,
			memory: (.server_type.memory | tostring + " GB"),
			disk: (.server_type.disk | tostring + " GB"),
			location: .datacenter.location.name,
			city: .datacenter.location.city,
			os: .image.description
		}]')
	echo "$json" | jq | rec --from-json

}

function hetzner_createSSH() {

	local public_key
	local name

	public_key=${1-""}
	name=${2-"$(random string)"}

	if [[ -z $public_key ]]; then
		echo "Error: public_key is required." >&2
		exit 1
	fi

	local response
	response=$(curl -sL -X POST \
		-H "Authorization: Bearer $HETZNER_API_TOKEN" \
		-H "Content-Type: application/json" \
		-d '{
			"name": "'"$name"'",
			"public_key": "'"$public_key"'"
		}' "https://api.hetzner.cloud/v1/ssh_keys")

	if [[ $(echo "$response" | jq -r '.error') == "null" ]]; then
		echo "$response" | jq -r '.ssh_key.id'
	else
		echo "Error: $(echo "$response" | jq -r '.error.message')." && exit 1
	fi

}

function hetzner_listSSH() {
    # only return: .ssh_keys[], and .id, .public_key
	curl -sL -H "Authorization: Bearer $HETZNER_API_TOKEN" \
        "https://api.hetzner.cloud/v1/ssh_keys" | jq '[.ssh_keys[] | {id: .id, name: .name, pub: .public_key}]' | rec --from-json
}

function hetzner_createFirewall() {

	local name
	local rules
	local response

	name=$1
	rules=$2

	response=$(
		curl -sL -X POST \
			-H "Authorization: Bearer $HETZNER_API_TOKEN" \
			-H "Content-Type: application/json" \
			-d '{
				"name": "'"$name"'",
				"rules": '"$rules"'
			}' "https://api.hetzner.cloud/v1/firewalls"
	)

	if [[ $(echo "$response" | jq -r '.error') != "null" ]]; then
		echo "Error: $(echo "$response" | jq -r '.error.message')" && exit 1
	fi

	echo "$response" | jq '.firewall | {id, name, rules: .rules[].direction + " " + .rules[].protocol + " " + .rules[].port + " " + .rules[].source_ips}' | rec --from-json

}

function hetzner_listFirewalls() {}

function hetzner_createServer() {

	local name
	local key
	local response

	name=$1
	key=$2

	response=$(
		curl -sL -X POST \
			-H "Authorization: Bearer $HETZNER_API_TOKEN" \
			-H "Content-Type: application/json" \
			-d '{
				"image" : "ubuntu-22.04",
				"location" : "ash",
				"name" : "'"$name"'",
				"server_type" : "cpx11",
				"ssh_keys" : [ '"$key"' ],
				"start_after_create" : true
			}' "https://api.hetzner.cloud/v1/servers"
	)

	if [[ $(echo "$response" | jq -r '.error') != "null" ]]; then
		echo "Error: $(echo "$response" | jq -r '.error.message')" && exit 1
	fi

	# return only the vital details about server as recfile
	echo "$response" | jq '.server | {
		id,
		name,
		ip: .public_net.ipv4.ip,
		type: .server_type.description,
		location: .datacenter.location.name,
		city: .datacenter.location.city,
		os: .image.description
	}' | rec --from-json

}

function main() {

	local cloud_provider
	local command
	local name
	local key

	cloud_provider=$(getCloudProvider)
	command=$1
	shift

	case $command in
		info) "${cloud_provider}_info" ;;
		create)
			while [[ $# -gt 0 ]]; do
				case $1 in
					--name|-N) name="$2" && shift 2 ;;
					--key|-K)
						if [[ $(validate integer "$2") == 'true' ]]; then
							key="$2" && shift 2
						else
							echo "Error: invalid key ID (not an integer)" && exit 1
						fi
						;;
					*) echo "Invalid argument: $1" && exit 1 ;;
				esac
			done
			"${cloud_provider}_createServer" "$name" "$key"
			;;
		ssh)
			case $1 in
				create) "${cloud_provider}_createSSH" "${@:2}" ;;
				list) "${cloud_provider}_listSSH" ;;
				*) echo "Invalid argument: $1" && exit 1 ;;
			esac

	esac

}

run_script "$@"