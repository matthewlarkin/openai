#!/bin/bash

cd "$(dirname "$0")" && source .lib/barerc || exit 1

deps magick

command=$1 && shift;

case $command in

	crop )
	
		image="$1"
		aspect_ratio="${2:-3:2}"
		focal_orientation="${3:-center}"
		overwrite_mode="$4"

		# Validate aspect ratio format (e.g., 16:9)
		if ! [[ $aspect_ratio =~ ^[0-9]+:[0-9]+$ ]]; then
			echo "Aspect ratio must be in the format W:H (e.g., 16:9)"
			exit 1
		fi

		# Validate focal orientation
		case $focal_orientation in
			north|south|east|west|center|northwest|northeast|southwest|southeast) ;;
			*) echo "Focal orientation must be one of: north, south, east, west, center, northwest, northeast, southwest, southeast" && exit 1 ;;
		esac

		# Generate a semantic file name
		output_filename="${image%.*}_${aspect_ratio//:/x}_${focal_orientation}.${image##*.}"

		# Check if file exists and overwrite mode is not set to "overwrite"
		[ -f "$output_filename" ] && [ "$overwrite_mode" != "overwrite" ] && exit 0

		# Determine new dimensions and crop position based on aspect ratio and focal orientation
		case $focal_orientation in
			northwest) gravity="NorthWest" ;;
			north) gravity="North" ;;
			northeast) gravity="NorthEast" ;;
			west) gravity="West" ;;
			center) gravity="Center" ;;
			east) gravity="East" ;;
			southwest) gravity="SouthWest" ;;
			south) gravity="South" ;;
			southeast) gravity="SouthEast" ;;
		esac

		# Crop image using ImageMagick's convert tool
		magick "$image" -gravity "$gravity" -crop "$aspect_ratio" +repage "$output_filename" && echo "$output_filename" && exit 0 || echo "Failed to process $image" && exit 1;

		;;


	convert )

		# cases: png-to-jpg, heic-to-jpg, jpg-to-webp, png-to-webp, heic-to-webp

		case "$1" in
			jpg-to-png | png-to-jpg | png-to-webp | heic-to-jpg | heic-to-webp | jpg-to-webp )
				if [ -z "$2" ]; then
					image=$(cat)
				else
					image="$2"
				fi
				output_extension=${1#*-to-}
				output_filename="${image%.*}.$output_extension"
				magick "$image" "$output_filename" && echo "$output_filename" && exit 0 || echo "Failed to process $image" && exit 1
				;;
			*)
				echo "Invalid conversion: $1" && exit 1
				;;
		esac
	
		;;


	resize )
		
		# Simple usage message
		usage() {
		  echo "Usage: $0 <image_path> <height>"
		  exit 1
		}
		
		# Check for correct number of arguments
		[ "$#" -eq 2 ] || usage
		
		image="$1"
		height="$2"
		output_filename="${image%.*}_resized.${image##*.}"
		
		# Exit if input file doesn't exist
		[ -f "$image" ] || { echo "Error: File '$image' not found."; exit 1; }
		
		# Extract the file extension
		extension="${image##*.}"
		
		# Extract the base name without the extension
		base_name="${image%.*}"
		
		# Create a more semantic output filename that includes the target height
		output_filename="${base_name}_${height}px.${extension}"
		
		# Resize image and handle success or failure
		if magick "$image" -resize x"$height" "$output_filename"; then
		  echo "$output_filename"
		else
		  echo "Failed to process $image"
		  exit 1
		fi

		;;


	thumbnail )

		image="$1"
		./bare image resize "$image" 300

		;;

	geo ) ;; # pending
	describe ) ;; # pending
	rotate ) ;; # pending
	blur ) ;; # pending

	* ) echo "Invalid command: $command" && exit 1 ;;

esac