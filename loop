#!/usr/bin/env bash

function main() {

    local csv_file="$1"
    local script="$2"

    # If csv_file is not provided, read from stdin
    if [[ -z "$csv_file" || "$csv_file" == "/dev/stdin" ]]; then
        csv_contents=$(cat)
    elif [[ -f "$csv_file" && "$csv_file" == *.csv ]]; then
        csv_contents=$(cat "$csv_file")
    else
        echo "Error: You must provide a valid CSV file or input via stdin."
        exit 1
    fi

    # Read the header row to determine the field names
    IFS=',' read -r -a fields <<< "$(echo "$csv_contents" | head -n 1)"

    # Process each row in the CSV, starting from the second line
    echo "$csv_contents" | tail -n +2 | while IFS=',' read -r line; do
        # Read the values into an array by splitting the line manually
        IFS=',' read -r -a values <<< "$line"
        
        # Dynamically export variables for the current line
        for ((i=0; i<${#fields[@]}; i++)); do
            field_name="${fields[$i]}"
            field_value="${values[$i]}"
            field_value=$(echo "$field_value" | xargs | sed 's/^"\|"$//g')
            export "$field_name"="$field_value"
        done

        interpret "$script"

    done

}

# If input is piped, read the script name as the first argument
if [[ -t 0 ]]; then
    main "$@"
else
    script="$1"
    shift
    main /dev/stdin "$script"
fi








# remaining_args=() && while [[ $# -gt 0 ]]; do
# 	case $1 in
# 		over) shift ;;
# 		*) remaining_args+=("$1") && shift ;;
# 	esac
# done && set -- "${remaining_args[@]}"

# [[ -t 0 ]] && csv=$(cat "$1") && shift || csv=$(cat)

# script="$1" && shift

# # Read the CSV file and process each row
# echo "$csv" | csvjson --snifflimit 0 --no-inference | jq -c '.[]' | while read -r row; do

#     # Use jq to extract all keys and values in one go
#     declare -A row_data
#     while IFS="=" read -r key value; do
#         row_data["$key"]="$value"
#     done < <(echo "$row" | jq -r 'to_entries | .[] | "\(.key)=\(.value)"')

#     # Export the variables
#     for key in "${!row_data[@]}"; do
# 		var_name=$(echo "$key" | tr ' ' '_' | tr '[:upper:]' '[:lower:]' | tr -cd '[:alnum:]_')
#         export "$var_name=${row_data[$key]}"
#     done

# 	# clear stdin for script call
# 	echo "" | interpret "$script"

# done
