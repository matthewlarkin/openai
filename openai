#!/usr/bin/env bash

set -e

[ -z "$OPENAI_API_KEY" ] && {
	echo "OPENAI_API_KEY is not defined";
	exit 1;
}

deps curl jq openssl

# capture assistant name
remaining_args=() && while [[ "$#" -gt 0 ]]; do
	case $1 in
		@*) assistant_name="${1#@}"; shift ;;
		--assistant) assistant_name="$2"; shift 2 ;;
		--assistants) list_assistants=1 && shift ;;
		--thread) thread_title="$2"; shift 2 ;;
		--threads) list_threads=1 && shift ;;
		--json) json_mode=1 && shift ;;
		--debug) debug='true' && shift ;;
		--high-powered) mode='high-powered'; shift 2 ;;
		*) remaining_args+=("$1"); shift ;;
	esac
done && set -- "${remaining_args[@]}"

# set system prompt (according to assistant name)
assistant_prompt="You are a helpful assistant.";
[[ -n $assistant_name ]] && {
	assistant_introduction="In this conversation thread you are '$assistant_name'."
	assistant_instructions="$(recsel -t Assistant .var/bare.rec -e "Name = '$assistant_name'" -P Contents)"
	assistant_background="Take into consideration the conversation thread (even if some messages are not your own, as you may be entering the chat mid-conversation and should catch yourself up)."
	assistant_prompt="%YOUR_NAME: $assistant_introduction - - - %YOUR_INSTRUCTIONS: $assistant_instructions - - - %BACKGROUND: $assistant_background - - - %YOUR TASK: Now, you have just been addressed, so respond to the last thing said in a manner consistent with %YOUR_INSTRUCTIONS."
}

# if --threads, just list thread title and exit
[[ -n $list_threads ]] && recsel -t Thread .var/bare.rec -P Title && exit 0

# if --assistants, just list assistants and their instructions and exit
[[ -n $list_assistants ]] && recsel -t Assistant .var/bare.rec -p Name,Contents | awk '{
  while (length($0) > 60) {
    space_index = 60
    while (substr($0, space_index, 1) != " " && space_index > 1) space_index--
    if (space_index == 1) space_index = 60
    print substr($0, 1, space_index)
    $0 = substr($0, space_index + 1)
  }
  print
}' && exit 0


command="chat"

args=() && for arg in "$@"; do
	case $arg in
		chat|voice|listen|transcribe) command=$arg && shift ;;
		*) args+=("$arg") && shift ;;
	esac
done && set -- "${args[@]}"

case $command in 

    "chat" )

		# Initialize variables
		if [[ $mode == 'high-powered' ]]; then
			model="gpt-4o"
		else
			model=${OPENAI_DEFAULT_MODEL:-'gpt-4o-mini'}
		fi
		system_prompt="$assistant_prompt"
		user_messages=()
		assistant_messages=()
		
		# Read the first user message from arguments or stdin
		if [ -n "$1" ]; then
			user_messages+=("$1")
		else
			while IFS= read -r line; do
				user_messages+=("$line")
				break  # Exit after the first line of input
			done < /dev/stdin
		fi
		
		shift
		# Parse command-line arguments
		while [[ "$#" -gt 0 ]]; do
			case $1 in
				--model) model="$2" && shift 2 ;;
				--system_prompt) system_prompt="$2" && shift 2 ;;
				--user_messages) user_messages+=("$2") && shift 2 ;;
				--assistant_messages) assistant_messages+=("$2") && shift 2 ;;
				--messages) messages=$(echo "$2" | jq -c .) && shift 2 ;;
				*) echo "Invalid option: $1" >&2 && exit 1 ;;
			esac
		done

		

		if [[ -n $thread_title ]]; then

			[[ "$(recsel -t Thread .var/bare.rec -e "Title = '$thread_title'")" ]] || recins -t Thread .var/bare.rec -f Title -v "$thread_title"

			thread_contents=$(recsel -t ThreadMessage .var/bare.rec -p Created,Author,Contents -e "Thread = '$thread_title'")

			recins -t ThreadMessage .var/bare.rec -f Thread -v "$thread_title" -f Author -v "User" -f Contents -v "$user_messages"

		fi

		[[ -n $json_mode ]] && system_prompt="$system_prompt. Return as a raw JSON object (not a json code block). If the user does not specify a property to put the response in, put the response in a property named 'response'. IMPORTANT: DO NOT RETURN A MARKDOWN CODE BLOCK; RETURN A VALID JSON STRING."
		
		# Construct the messages array if not provided
		if [ -z "$messages" ]; then
			
			# Initialize the messages array with the system prompt
			messages=$(jq -n --arg system_prompt "$system_prompt" '[
			  {
				"role": "system",
				"content": $system_prompt
			  }
			]')
			
			if [[ -n $thread_title ]]; then
				# Fetch the message thread and convert it to a JSON array
				message_thread=$(recsel -t ThreadMessage .var/bare.rec -p Created,Author,Contents -e "Thread = '$thread_title'" | rec --json)
				
				# Format the message_thread JSON array using jq
				formatted_message_thread=$(echo "$message_thread" | jq '[.[] | {role: (if .Author == "User" then "user" else "assistant" end), name: (if .Author != "User" then .Author else null end), content: .Contents}]')
			else
				# put single value of "$user_messages" and format that as a single message
				formatted_message_thread=$(jq -n --arg user_message "${user_messages[0]}" '[{role: "user", content: $user_message}]')
			fi
				
			# Append the formatted_message_thread array to the messages array
			messages=$(jq --argjson thread "$formatted_message_thread" '. + $thread' <<< "$messages")

		fi
		
		# Construct the final JSON string using jq
		payload=$(jq -n --arg model "$model" --argjson messages "$messages" '{
			model: $model,
			messages: $messages
		}')

		# if json_mode append "response_format": { "type": "json_object" } to payload
		[[ -n $json_mode ]] && payload=$(echo "$payload" | jq '. + {response_format: {type: "json_object"}}')

		[[ $debug == 'true' ]] && {
			./request "https://api.openai.com/v1/chat/completions" --token "$OPENAI_API_KEY" --json "$payload" | jq
			exit 0
		}
		
		response=$(./request "https://api.openai.com/v1/chat/completions" --token "$OPENAI_API_KEY" --json "$payload" | jq -r '.choices[0].message.content');

		[[ -n $thread_title ]] && {
			recins -t ThreadMessage .var/bare.rec -f Thread -v "$thread_title" -f Author -v "${assistant_name-Assistant}" -f Contents -v "$response"
		}

		echo "$response"

        ;;


	"voice" )
		
		model='tts-1'
		voice='alloy'
		response_format='mp3'
		speed=1
	
		# Check if $1 is provided
		if [ -n "$1" ]; then
			input="$1"
		else
			input="$(cat | codec newlines.encode)"
		fi

		output="$(./bare random string 32).mp3"

		while getopts "m:i:v:f:s:o:" opt; do
			case $opt in
				m ) model=$OPTARG ;;
				i ) input=$OPTARG ;;
				v ) voice=$OPTARG ;;
				f ) response_format=$OPTARG ;;
				s ) speed=$OPTARG ;;
				o ) output=$OPTARG ;;
				\? ) echo "Invalid option: $OPTARG" >&2 && exit 1 ;;
				: ) echo "Option -$OPTARG requires an argument." >&2 && exit 1 ;;
			esac
		done

		payload=$(jq -n \
			--arg model "$model" \
			--arg input "$input" \
			--arg voice "$voice" \
			--arg response_format "$response_format" \
			--arg speed "$speed" \
		'{
			model: $model,
			input: $input,
			voice: $voice,
			response_format: $response_format,
			speed: $speed
		}')

		curl -s https://api.openai.com/v1/audio/speech \
			-H "Authorization: Bearer $OPENAI_API_KEY" \
			-H "Content-Type: application/json" \
			-d "$payload" \
			-o ".var/downloads/$output"

		# Check if the file was created and is not empty
		if [ ! -s ".var/downloads/$output" ]; then
			echo "Error: File $output was not created or is empty" >&2
			exit 1
		fi

		echo ".var/downloads/$output"

		;;
	"listen" )

		# Coming soon. OpenAI only accepts text and image as of now.

		;;


	"transcribe" )

		model='whisper-1'
		language='en'
		prompt=''
		response_format='json'
		temperature=0
		timestamp_granularities='segment'
		file="$1" && shift

		while [[ "$#" -gt 0 ]]; do
			case $1 in
				--model) model="$2"; shift ;;
				--language) language="$2"; shift ;;
				--prompt) prompt="$2"; shift ;;
				--response_format) response_format="$2"; shift ;;
				--temperature) temperature="$2"; shift ;;
				--timestamp_granularities) timestamp_granularities="$2"; shift ;;
				*) echo "Invalid option: $1" >&2 && exit 1 ;;
			esac
			shift
		done

		if [ -z "$file" ]; then
			read -r file
			if [ -z "$file" ]; then
				echo "Error: No file path provided" >&2
				exit 1
			fi
		fi
		
		if [ ! -f "$file" ]; then
			echo "Error: File '$file' not found" >&2
			exit 1
		fi

		# Check if the file size is greater than 20MB (20 * 1024 * 1024 bytes)
		file_size=$(stat -f%z "$file")
		max_size=$((20 * 1024 * 1024))
		if [ "$file_size" -gt "$max_size" ]; then
			echo "Warning: Files larger than 20MB are not supported. The transcription may fail." >&2
			# Optionally, exit or continue based on your requirements
			# exit 1
		fi
		
		response=$(curl -s https://api.openai.com/v1/audio/transcriptions \
			-H "Authorization: Bearer $OPENAI_API_KEY" \
			-H "Content-Type: multipart/form-data" \
			-F file="@$file" \
			-F model="$model" \
			-F language="$language" \
			-F prompt="$prompt" \
			-F response_format="$response_format" \
			-F temperature="$temperature" \
			-F timestamp_granularities="$timestamp_granularities")
		
		# Extract the text property from the JSON response and print it
		echo "$response" | jq -r '.text'
		;;

	* ) echo "Invalid command" && exit 1 ;;

esac