#!/usr/bin/env bash

./deps rec2csv csvlook

if [[ -f $1 ]]; then
	input=$(cat "$1") && shift;
else
	[[ -t 0 ]] || input=$(cat);
fi

[[ -z $input ]] && input=$(cat .var/bare.rec)

command="$1" && shift

remaining_args=() && while [[ "$#" -gt 0 ]]; do
	case $1 in
		random|-m|--random) remaining_args+=(-m) && shift ;;
		--table) as_table=1 && shift ;;
		--as) as="$2" && shift 2 ;;
		*) remaining_args+=("$1") && shift ;;
	esac
done && set -- "${remaining_args[@]}"

case $command in

	schema) echo "$input" | recinf -d ;;

	tables|types) echo "$input" | recinf -d | sed -n '/^%rec/s/^%rec: //p' ;;

	insert|create)

		[[ $# -eq 0 ]] && echo "Error: expected at least one argument" && exit 1

		output=$(echo "$input" | recins "$@")
		[[ $? -ne 0 ]] && echo "$output" && exit 0
		echo "$output" > .var/bare.rec

		;;

	delete|remove)

		[[ $# -eq 0 ]] && echo "Error: expected at least one argument" && exit 1

		output=$(echo "$input" | recdel "$@")
		[[ $? -ne 0 ]] && echo "$output" && exit 0
		echo "$output" > .var/bare.rec

		;;

	select)

		echo "$input" | recsel "$@"

		;;

	list)

		case $1 in

			[dD]ocuments) echo "$input" | recsel -t Document -P Title -C ;;

			[aA]ssistants) echo "$input" | recsel -t Assistant -P Name -C ;;

			[sS]cripts) find .var/scripts -maxdepth 1 -print0 | xargs -0 -I {} basename {} ;;

			[tT]hreads) echo "$input" | recsel -t Thread -P Title -C ;;

			[tT]ags) echo "$input" | recsel -t Tag -P Title -C ;;

		esac

		;;

	import)

		case $1 in

			from)

				shift

				file="$1" && shift
				[[ ! -f "$file" ]] && echo "ERROR: no such file: $1" && exit 1
				# if file is .csv file pipe to --from-csv, if .json pipe to --from-json
				destination="$2" && shift
				[[ $2 == 'to' ]] && destination="$3"
				[[ $file == *.csv ]] && rec --from-csv "$file" "$destination"
				[[ $file == *.json ]] && rec --from-json "$file" "$destination"

				;;

		esac

		;;

	--csv|--to-csv)

		echo "$input" | rec2csv

		;;

	--json|--to-json)

        # Convert recsel output to CSV, then to JSON, and format with jq
        json_output=$(echo "$input" | rec2csv 2>/dev/null | python3 -c 'import csv, json, sys; print(json.dumps([dict(r) for r in csv.DictReader(sys.stdin)]))' 2>/dev/null | jq 2>/dev/null)

        # Check if the conversion was successful
        if [[ $? -eq 0 ]]; then
            echo "$json_output" | jq
        else
            echo "Error: Conversion failed" >&2
            exit 1
        fi

		;;

	--from-json)
		
		[[ -f "$1" ]] && input="$(cat "$1")" && shift
		[[ -z $input ]] && echo "ERROR: no input provided" && exit 1
		
		# Check if the input is an object or an array
		if echo "$input" | jq -e 'type == "object"' > /dev/null; then
			input="[$input]"
		fi
		
		# Convert given input to CSV
		output=$(echo "$input" | jq -r '(.[0] | keys_unsorted) as $keys | $keys, map([.[ $keys[] ]])[] | @csv' | csv2rec)
		[[ -n $1 ]] && echo "$output" >> "$1" || echo "$output"

        ;;

	--from-csv)

		[[ -f "$1" ]] && input="$(cat "$1")" && shift
		[[ -z $input ]] && echo "ERROR: no input provided" && exit 1
		output="$(echo "$input" | sed '1s/^\xEF\xBB\xBF//' | csv2rec)"
		[[ -n $1 ]] && echo "$output" >> "$1" || echo "$output"

		;;

	sync)

		if ! recinf "$1" > /dev/null 2>&1; then
			echo "Error: invalid source recfile"
			exit 1
		else
			recfile="$1"
		fi
		
		if ! recinf "$2" > /dev/null 2>&1; then
			echo "Error: invalid schema recfile"
			exit 1
		else
			schema_file="$2"
		fi
		
		# Extract and prepare %rec: blocks from schema
		schema_blocks=$(awk '/^%rec:/ {if (rec) print rec; rec=$0; next} /^%/ {rec=rec"\n"$0} END {print rec}' < "$schema_file")
		
		# Function to get a block from schema by type
		get_rec_block() {
			local type=$1
			echo "$schema_blocks" | awk -v type="$type" '
			$1 == "%rec:" && $2 == type {
				rec=$0
				while (getline > 0) {
					if ($1 == "%rec:") break
					rec=rec"\n"$0
				}
				print rec
				exit
			}'
		}
		
		# Trim the recfile to remove any lines that start with % (except those that start with %rec:)
		recfile_trimmed=$(sed '/^%[^r]/d' < "$recfile")
		
		# Process recfile_trimmed to insert corresponding %rec: blocks
		output=""
		processed_types=()
		while IFS= read -r line; do
			if [[ $line =~ ^%rec: ]]; then
				rec_type=$(echo "$line" | cut -d' ' -f2)
				block=$(get_rec_block "$rec_type")
				output+=$'\n'"$block"$'\n'
				processed_types+=("$rec_type")
			else
				output+="$line"$'\n'
			fi
		done <<< "$recfile_trimmed"
		
		# Add any missing schema blocks that were not in the original recfile
		while IFS= read -r line; do
			if [[ $line =~ ^%rec: ]]; then
				rec_type=$(echo "$line" | cut -d' ' -f2)
				found=false
				for type in "${processed_types[@]}"; do
					if [[ "$type" == "$rec_type" ]]; then
						found=true
						break
					fi
				done
				if [[ "$found" == false ]]; then
					block=$(get_rec_block "$rec_type")
					output+=$'\n'"$block"$'\n'
				fi
			fi
		done <<< "$schema_blocks"

		# trim any newlines that has a newline directly after it with sed
		echo "$output" | sed '/^$/N;/^\n$/D' > "$recfile"

		;;

esac

exit 0