#!/usr/bin/env bash

cd "$(dirname "$0")" && source .lib/barerc || exit 1

[[ -t 0 ]] || input=$(cat)

format='text' # Default format
variant='hyphens' # Default phone format variant
all=0

# Parse arguments
remaining_args=() && while [[ $# -gt 0 ]]; do
  case $1 in
    --phone|--telephone) format='phone' ;;
    --parentheses|--parenthetical|--paren) variant='parentheses' ;;
    --hyphens|--hyphenated|--dashes|--dashed) variant='hyphens' ;;
    --dots|--dotted|--periods) variant='dots' ;;
    --spaces|--spaced) variant='spaces' ;;
    --plain|--raw|--none|--clean) variant='plain' ;;
    --uppercase|--upper|--caps) variant='uppercase' ;;
    --lowercase|--lower) variant='lowercase' ;;
    --capitalize|--capitalized) variant='capitalize' ;;
	--space-collapse|--squish) variant='squish' ;;
	--trim) variant='trim' ;;
    --all) all=1 ;;
    *) remaining_args+=("$1") ;;
  esac
  shift
done && set -- "${remaining_args[@]}"

# Check if input is provided via stdin
[[ $# -eq 1 ]] && input=$1

case $format in

  phone)

    phone=$(echo "$input" | tr -cd '[:digit:]')

    # Check if the phone number is a valid NANP number
    if [[ $phone =~ ^1?([2-9][0-9]{2}[2-9][0-9]{2}[0-9]{4})$ ]]; then
      phone="${BASH_REMATCH[1]}"
    else
      echo "Invalid phone number: Must be a valid NANP number"
      exit 1
    fi

    case $variant in
      parentheses)
        echo "(${phone:0:3}) ${phone:3:3}-${phone:6:4}"
        ;;
      hyphens)
        echo "${phone:0:3}-${phone:3:3}-${phone:6:4}"
        ;;
      dots)
        echo "${phone:0:3}.${phone:3:3}.${phone:6:4}"
        ;;
      spaces)
        echo "${phone:0:3} ${phone:3:3} ${phone:6:4}"
        ;;
      plain)
        echo "$phone"
        ;;

    esac

    ;;

  text)
    case $variant in
		squish) echo "$input" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//' ;;
      	uppercase) echo "$input" | tr '[:lower:]' '[:upper:]' ;;
      	lowercase) echo "$input" | tr '[:upper:]' '[:lower:]' ;;
      	capitalize)
			if [[ $all -eq 1 ]]; then
				echo "$input" | awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) tolower(substr($i,2)); print}'
			else
				echo "$input" | awk '{first=toupper(substr($1,1,1)) tolower(substr($1,2)); $1=""; print first $0}'
			fi
			;;
			trim) echo "$input" | awk '{$1=$1; printf "%s", $0}' ;;
    esac
    ;;
esac

exit 0