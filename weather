#!/usr/bin/env bash

cd "$(dirname "$0")" && source .lib/barerc || exit 1

[[ -t 0 ]] && input="$1" && shift || input=$(cat)

# detect if input is a lat,long
if [[ $input =~ ^-?[0-9]+\.[0-9]+,-?[0-9]+\.[0-9]+$ ]]; then
    location=$input
else
    location=$(geo "$input")
fi

cache_path=".var/.cache/weather/$(codec text.filesafe "$location")"

[[ $BARE_COLOR == '0' ]] && color='0' || color='1'

remaining_args=() && while [[ $# -gt 0 ]]; do
	case $1 in
		--no-color|no-color) color='0' && shift ;;
		--concise|concise) json_requested='1'; concise='1' && shift ;;
		--json|json) json_requested='1'; json='1' && shift ;;
		--sunrise|sunrise) json_requested='1'; sunrise='1' && shift ;;
		--sunset|sunset) json_requested='1'; sunset='1' && shift ;;
		--moonrise|moonrise) json_requested='1'; moonrise='1' && shift ;;
		--moonset|moonset) json_requested='1'; moonset='1' && shift ;;
		--cloud-cover|--cloud-coverage|cloud-cover) json_requested='1'; cloud_cover='1' && shift ;;
		--at|at) json_requested='1'; time="$(date "$2" --format 'hh:mm')" && shift 2 ;;
		*) remaining_args+=("$1") && shift ;;
	esac
done && set -- "${remaining_args[@]}"

[[ $color == '0' ]] && color_code='T'

[[ $json_requested == '1' ]] && {

	function cacheJSON() {
		json=$(curl -sL "wttr.in/$location?format=j1")
		mkdir -p .var/.cache/weather
		echo "$json" > "$cache_path.json"
	}

	# check cache for json
	if [[ ! -f "$cache_path.json" ]]; then
		cacheJSON;
	else
		cache_age=$(age "$cache_path.json" --hours)
		if (( $(echo "$cache_age > 1" | bc -l) )); then
			cacheJSON;
		fi
	fi
	json=$(< "$cache_path.json")

	[[ $concise == '1' ]] && {
		echo "$json" | jq -r '.current_condition[0].weatherDesc[0].value'
		exit 0
	}

	[[ $sunrise == '1' ]] && {
		echo "$json" | jq -r '.weather[0].astronomy[0].sunrise'
		exit 0
	}

	[[ $sunset == '1' ]] && {
		echo "$json" | jq -r '.weather[0].astronomy[0].sunset'
		exit 0
	}

	[[ $moonrise == '1' ]] && {
		echo "$json" | jq -r '.weather[0].astronomy[0].moonrise'
		exit 0
	}

	[[ $moonset == '1' ]] && {
		echo "$json" | jq -r '.weather[0].astronomy[0].moonset'
		exit 0
	}

	[[ $cloud_cover == '1' ]] && {
		echo "$json" | jq -r '.current_condition[0].cloudcover'
		exit 0
	}

}

case $1 in
	today|--today)
		response=$(curl -sL "wttr.in/${location}?uQ${color_code}F1" | sed -n '/┌─────────────┐/,/└─────────────┘/p')
		cache_append=".today"
		;;
	tomorrow|--tomorrow)
		response=$(curl -sL "wttr.in/${location}?uQ${color_code}F2" | sed -n '/┌─────────────┐/,/└─────────────┘/p' | tail -n 10)
		cache_append=".tomorrow"
		;;
	forecast|--forecast)
		response=$(curl -sL "wttr.in/${location}?uQ${color_code}F3" | sed -n '/┌─────────────┐/,/└─────────────┘/p')
		cache_append=".forecast"
		;;
	* )
		response=$(curl -sL "wttr.in/${location}?uQ${color_code}F" | head -n 5)
		cache_append=".now"
esac

# if simple request, cache and respond now
[[ -n $response ]] && {
	if [[ ! -f "${cache_path}${cache_append}" ]]; then
		mkdir -p .var/.cache/weather
		echo "$response" > "${cache_path}${cache_append}"
	fi
}

# if no response, check cache
[[ -z $response ]] && {
	if [[ -f "${cache_path}${cache_append}" ]]; then
		cat "${cache_path}${cache_append}"
		exit 0
	fi
}

echo "$response"
